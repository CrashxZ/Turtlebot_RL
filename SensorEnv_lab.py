import gym 
import threading
from gym import Env
from gym.spaces import Discrete, Box, Dict, Tuple, MultiBinary, MultiDiscrete 
import numpy as np
import random
import os
from stable_baselines3 import PPO, DQN , A2C
from stable_baselines3.common.vec_env import DummyVecEnv
from stable_baselines3.common.evaluation import evaluate_policy
from datetime import datetime
import math
from scipy.spatial import distance
import time
import csv


class NeedySensor(Env):
    model_name = "model_22" #prototype_scale_15
    model_path = "Training/Models/"+model_name
    log_path = "Training/Logs/"+model_name
    #logger = csv.writer(csv_log, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
    #logger.writerow(['Episode','Action','Distance Travelled','Reward'])
    sens_pos = []
    def __init__(self):
        self.sensor_count = 4
        self.critical_level = 10 #percent charge
        self.warning_level = 20  #percent charge
        self.pose_x = 0
        self.pose_y = 0
        self.map_bound = 5
        self.current_position=(self.pose_x,self.pose_y)
        self.sensor_positions = []
        self.total_distance = 0
        self.dead_sensors = 0
        self.previous_action = -1
        self.min = -1
        self.minbatt = -1
        self.navigation_targets = []

        with open('waypoints_lab.txt', mode='r') as waypoints_file:
            waypoints = csv.reader(waypoints_file, delimiter=',')
            for row in waypoints:
                if(row[3]=="1"):
                    self.sensor_positions.append([float(row[0]),float(row[1])])
                    print('Loading trajectory waypoint - > {}'.format(row))
        
       
        #self.sensor_positions = sensor_positions
        self.init_time = datetime.now()
        
        self.action_space = Discrete(self.sensor_count)
        self.observation_space = Box(0,100,shape=(self.sensor_count*2,))
        self.state = np.empty([self.sensor_count,2]).flatten('F')
        self.P_list = np.zeros(self.sensor_count)
        self.episodes = 100
        

    def get_sensor_count(self):
        return self.sensor_count

    def add_nav_targets(self,x,y,w,s):
        self.navigation_targets.append([x,y,w,s])
    
    def get_state(self):
        return self.state
    
    def decay(self):
        for i in range(self.sensor_count):
            self.state[i] = self.state[i] - ((random.random() + random.random())*0.9)  #*0.1 for gazebo # 5, 5
            

    def decay_validation(self):
        decay_recorded = [
                        [0.1251506548375965 ,0.08068656135580884 ,0.06811731892655479 ,0.14831039127823742 ,0.0888654584031395 ,0.0412585945815494 ,0.10367756961166655 ,0.1668238950336205 ,0.12161675770569239 ,0.05082069934950567 ,0.10549177560741727 ,0.09126503725578584 ,0.08802004830815655 ,0.034326257755182915 ,0.118750115558139 ,0.13425803827776972 ,0.07777601100638462 ,0.16301877630260886 ,0.08966158161936962 ,0.14408916592284376 ,0.09110989499294682 ,0.12144893581116115 ,0.08126185996443143 ,0.08143478718396198 ,0.08704728029200633 ,0.12601780913537144 ,0.08885256443015145 ,0.11615310881408034 ,0.1006544860257617 ,0.06966100769084356 ,0.06121803418957174 ,0.03243170317549328 ,0.0882377894895582 ,0.15951880626111106 ,0.06518863539754652 ,0.13690304626635721 ,0.14451791013175547 ,0.026511674356235106 ,0.1088049163705043 ,0.07254744601777177 ,0.057098608137696974 ,0.05714709308117437 ,0.15395704480050904 ,0.09081843675823563 ,0.09159105209309786 ,0.07901200091210692 ,0.009071657244145959 ,0.16910426021678837 ,0.06894865973678045 ,0.13756543968684348 ,0.14385959929702735 ,0.16658355942201816 ,0.11445164191830007 ,0.06357566131886662 ,0.1399084886904865 ,0.11792424649509227 ,0.09599973236272394 ,0.05742391058175894 ,0.09788781806930597 ,0.12734821037927752],
                        [0.10335605616522625 ,0.045974186253152444 ,0.03725789939206323 ,0.08070627966707977 ,0.09118605504271868 ,0.0736616260688403 ,0.12299179480900674 ,0.16989515415195855 ,0.12607221917144637 ,0.01968349632944304 ,0.07915746375888019 ,0.04684517373216956 ,0.11041066434960425 ,0.027543704175895724 ,0.19079194387189052 ,0.1732115307236354 ,0.08761038025648002 ,0.15378223279396705 ,0.15442693219821166 ,0.1584653659053451 ,0.17151135611025276 ,0.14100923687064115 ,0.1085359359227758 ,0.039426323207588834 ,0.17786060439619156 ,0.06638321885281655 ,0.11903944611234488 ,0.16483753893598166 ,0.07934053516086616 ,0.09751847334880598 ,0.009766478380632049 ,0.133765062042283 ,0.05222644555390787 ,0.08332719657957192 ,0.15388621636652774 ,0.10632440414501208 ,0.015556661849696264 ,0.06485638285568096 ,0.06281656436999783 ,0.1034757600777812 ,0.16636002421857138 ,0.14979443213384974 ,0.19909728911269314 ,0.1555319235947561 ,0.07890612484686009 ,0.09297129872693399 ,0.1133305945156493 ,0.1058689225421186 ,0.11557731502137164 ,0.10523180997932682 ,0.10043426863919336 ,0.07994700836391863 ,0.09321534859045179 ,0.05475385726095414 ,0.11022832449889891 ,0.12990830326607639 ,0.14601360378577122 ,0.03187372603675109 ,0.13877728209333123 ,0.06805413370012746],
                        [0.11168479301914744 ,0.11617115617087469 ,0.017664230484171838 ,0.04807613981650391 ,0.09432123398071471 ,0.10257707864958049 ,0.16188195176145145 ,0.05732263035339526 ,0.11557920822491635 ,0.13781165074516327 ,0.02255306911388957 ,0.05402950185652183 ,0.0915462414398582 ,0.11208312020592939 ,0.07743400688274296 ,0.14812436381889704 ,0.05187557986721734 ,0.11282350328853882 ,0.07311116709970689 ,0.16204063829193383 ,0.061573677447945244 ,0.02872110182433213 ,0.09818418907127821 ,0.18054936014801382 ,0.10232105046630237 ,0.13882165352226716 ,0.07148697055234285 ,0.13006407516685914 ,0.08414681278342737 ,0.11981975586209798 ,0.09298473332945736 ,0.06464447599710599 ,0.07445753128990963 ,0.12169294540628081 ,0.08523703352435598 ,0.12006291679716125 ,0.10226984824528788 ,0.03489738290337274 ,0.1623390081356496 ,0.09490865204705401 ,0.16373865159417023 ,0.1653490985659279 ,0.11788512616663355 ,0.13965810250693794 ,0.1355924915877621 ,0.0461104897626603 ,0.10143310407509495 ,0.15148733246748133 ,0.07285279049715226 ,0.09173975848798345 ,0.08173385513035224 ,0.030181780144464133 ,0.14362137759885074 ,0.12787437205502572 ,0.14961064779389194 ,0.1498982569244785 ,0.06741177652940757 ,0.07080999437087511 ,0.06782202071103811 ,0.05200361577707971],
                        [0.09625557619712584 ,0.16914846259371547 ,0.11217892352097053 ,0.06510950230424782 ,0.06206660667633864 ,0.028809269980254727 ,0.11913591552067448 ,0.11037588498349493 ,0.08274026166221526 ,0.18114713241328007 ,0.18888606945478847 ,0.055140110705941214 ,0.08085283882074212 ,0.13911387624637073 ,0.14247246052468232 ,0.04829891138841297 ,0.07149411956811497 ,0.13809839683596714 ,0.07301358867868979 ,0.11736165117123604 ,0.16174134032116416 ,0.07911653914253902 ,0.09174114341348626 ,0.041069582112050765 ,0.12297670985062467 ,0.12146328119837922 ,0.06855991785397195 ,0.038053648298997766 ,0.0596136037988704 ,0.12414856767517742 ,0.11888315950414373 ,0.06915497338507798 ,0.05477108989170403 ,0.07279924255164717 ,0.0366399063971655 ,0.08432257047358813 ,0.06582023109995074 ,0.11730390433038149 ,0.17034116932531668 ,0.13169416472650464 ,0.11033863895158352 ,0.11375325716441857 ,0.14453764850000253 ,0.11970840522623465 ,0.059325500432696986 ,0.08557513149307168 ,0.0341609816272158 ,0.07268820795291306 ,0.07752592092711458 ,0.0960879678087804 ,0.14495594846462412 ,0.07096064903645105 ,0.04663648917598935 ,0.10131834042204342 ,0.10577281281127604 ,0.14054214657122516 ,0.10863713473473913 ,0.11353207774585022 ,0.09798416645514563 ,0.041714347165204425],
                        [0.09855750265168411 ,0.04257405933806685 ,0.08776048074503823 ,0.12258696756392498 ,0.1663618487216943 ,0.04632765408310555 ,0.09425255134615207 ,0.02811168509670569 ,0.0350900908693734 ,0.13779068266312108 ,0.0968465269940547 ,0.004677808750193723 ,0.10428678214943564 ,0.13101164095537465 ,0.10634451775192776 ,0.08733965252023164 ,0.14179493902153323 ,0.15231573200625947 ,0.08999904485986782 ,0.08607087726497094 ,0.019919402541676068 ,0.08389771095562684 ,0.0995627008091783 ,0.11032564977767609 ,0.026133182479297825 ,0.13438785793769592 ,0.115649370654765 ,0.07509726245275017 ,0.08595608230216771 ,0.12917880895891548 ,0.08833874252907642 ,0.06557029387338663 ,0.11196431561175066 ,0.047780570803177436 ,0.11221500476838304 ,0.18482229958321883 ,0.13763423813110667 ,0.1650374886421977 ,0.1564675604055725 ,0.07124654314720451 ,0.041911100591982296 ,0.08805465422866013 ,0.04333090113628767 ,0.11910976997293532 ,0.1031658081476738 ,0.13945255845572616 ,0.12432478273291295 ,0.1271644466530964 ,0.05987272472231417 ,0.07797057108383194 ,0.17998019709817942 ,0.04318540094270165 ,0.08868726556139679 ,0.05003228298792277 ,0.15360768875094089 ,0.09467054760611401 ,0.08885891432127005 ,0.10192049648727754 ,0.1340385320625828 ,0.10080170120127477],
                        [0.08911417707846674 ,0.12537007867553435 ,0.15141410885032414 ,0.12614563755485728 ,0.05533319557850168 ,0.11845813473729686 ,0.09793314693600916 ,0.02977761603206961 ,0.14965190091701075 ,0.081124710179234 ,0.17218820943527408 ,0.1618484066745571 ,0.10171408268134502 ,0.0840519193402483 ,0.1291412558146061 ,0.11130381257184262 ,0.13282700695918387 ,0.0841233840461379 ,0.077988914882323 ,0.1608937678729589 ,0.12698856621317378 ,0.10931186938576293 ,0.046821830884461006 ,0.09858452843146197 ,0.03930052022527841 ,0.14852783319693422 ,0.15399968860923985 ,0.0396590903068507 ,0.09621055713582373 ,0.10063921501632156 ,0.1467708276827056 ,0.11291612865892915 ,0.11514551801692678 ,0.13477919272760946 ,0.15048563056939232 ,0.11907719045574038 ,0.10376131765986749 ,0.10741712792491766 ,0.15346508305391796 ,0.03784983742156667 ,0.04421338807526266 ,0.07740340870939276 ,0.18413536005979242 ,0.11410309341324557 ,0.1757590402146194 ,0.1629087245457858 ,0.08111727348666337 ,0.027807547443488546 ,0.08079542451250993 ,0.08781913821180354 ,0.13396597124587611 ,0.12267693664925433 ,0.09759810400186997 ,0.08789097586123859 ,0.09064476882429298 ,0.16464152459967374 ,0.060544036839356954 ,0.10085779317363842 ,0.0085443353186045 ,0.10823972409455668],
                        [0.1136526440978227 ,0.12841163330205257 ,0.12249690420433512 ,0.1499025715743046 ,0.0805142929410653 ,0.16357549014018957 ,0.11747054203833088 ,0.07933291483779162 ,0.0780059757331768 ,0.09775863886489551 ,0.060548852254858745 ,0.04272224741208701 ,0.029412646360712804 ,0.017839260921237332 ,0.09147574237115311 ,0.01775452958833258 ,0.05747378098507616 ,0.16161865848412807 ,0.04467218615601403 ,0.11295368639834061 ,0.07972568930253748 ,0.13211181272888384 ,0.0961279818626703 ,0.16200257679153018 ,0.16323019194278438 ,0.1290932160560025 ,0.15711366265704732 ,0.0653396966456635 ,0.08996408219707369 ,0.1766683538164368 ,0.17686058269773788 ,0.060426704703012965 ,0.13568772242206287 ,0.04809044719681136 ,0.13596598654026237 ,0.0809919037650617 ,0.12865218057906908 ,0.017616002532626785 ,0.15017768570752288 ,0.12109154110642599 ,0.10151228217828416 ,0.10745318608582799 ,0.069692235665815 ,0.019105572073585875 ,0.08986716537420969 ,0.18117036482373408 ,0.10737042310158004 ,0.1679801655047498 ,0.08172536708280755 ,0.15369687703020166 ,0.043417100979372604 ,0.0953762173365566 ,0.13534345662396688 ,0.012081849228081778 ,0.15774743088107834 ,0.1245867177207228 ,0.04417311616487012 ,0.10001654039862398 ,0.05581570387079894 ,0.14067510103485625],
                        [0.16025473396694154 ,0.022821129346188188 ,0.1780694984381126 ,0.06805422809635034 ,0.12111279970789941 ,0.08840877707705536 ,0.13837610040317322 ,0.04326330774597248 ,0.12773438141284119 ,0.11126133170989207 ,0.1241062020044416 ,0.05502280065985979 ,0.09179343177117388 ,0.13737985719733845 ,0.12108598774677096 ,0.11152487774988115 ,0.11964728198928004 ,0.1753500523082751 ,0.09726068311247667 ,0.05117704443147626 ,0.04241002588331088 ,0.06996107641262399 ,0.07893793619093903 ,0.13097651164484075 ,0.05714233947162561 ,0.020605291255502478 ,0.11772071167344617 ,0.10648551027020056 ,0.15083298392800604 ,0.12953366497374116 ,0.10275102338048764 ,0.1621596156803904 ,0.13101136273317734 ,0.0548139591855129 ,0.11110458482492075 ,0.08249856196459784 ,0.12702054446887312 ,0.09952133351668846 ,0.1276496266241091 ,0.10689176385823254 ,0.19165949426348178 ,0.10212833286794569 ,0.09556582826044074 ,0.07854725672798987 ,0.08940655855453171 ,0.08479794875754554 ,0.14358047999180681 ,0.10745585856259064 ,0.1479605187397161 ,0.12579999611928186 ,0.08536951625461867 ,0.09946457604149901 ,0.1591158930487591 ,0.17552264552068664 ,0.13582490415428627 ,0.14222670590833386 ,0.11762021243545799 ,0.09021657206186809 ,0.1327293827340739 ,0.027261242558592236],
                        [0.09196495386741703 ,0.10748255336997936 ,0.09562536044185524 ,0.03530329266740272 ,0.07020751671394734 ,0.1204194807718836 ,0.16042663467383983 ,0.06902830348621232 ,0.17434723930104545 ,0.08283767710663206 ,0.04948202434554748 ,0.08495594878576695 ,0.0858998529716645 ,0.08677715898350334 ,0.06262818990714328 ,0.10091392368634175 ,0.04961164164002209 ,0.07317586295993267 ,0.09059979928423259 ,0.1408427861585682 ,0.0868075240401593 ,0.08931613636016836 ,0.15384979535540078 ,0.03144594585471665 ,0.17578508433697593 ,0.12776279431961762 ,0.10109996918831556 ,0.0762232256016126 ,0.09193012665749381 ,0.0765551440353751 ,0.16088177303308696 ,0.12100691003592916 ,0.11991284307599322 ,0.09829594377668963 ,0.17427771617568266 ,0.08096043573112684 ,0.12090413463809148 ,0.14396438685549645 ,0.09947576261255929 ,0.1432157941350007 ,0.18100313701678397 ,0.05491557865179467 ,0.11994420977546155 ,0.10753480403550555 ,0.15368933176541066 ,0.15294355181828187 ,0.056218847030419954 ,0.062049940029475836 ,0.1534828636967251 ,0.13624792488373055 ,0.17581452575865203 ,0.13649616250251934 ,0.1081420744672992 ,0.06563840549420828 ,0.09423016051117855 ,0.024953053253181326 ,0.019508450807924904 ,0.1295392476546302 ,0.07716006454082086 ,0.05418310329948013],
                        [0.18625701739255668 ,0.04492603054666281 ,0.05616940486126211 ,0.1263106326549657 ,0.09402961316363226 ,0.09311304949198793 ,0.14231804964575812 ,0.13585760371782024 ,0.16482714143959848 ,0.11969072016649253 ,0.17885856767197214 ,0.17053843728956902 ,0.08889643960075268 ,0.12866293679270852 ,0.044173462007893044 ,0.033398558541175453 ,0.10955353460241138 ,0.11576204408595475 ,0.04643066113897372 ,0.02319123515304249 ,0.09396192658103777 ,0.061722422364498916 ,0.087620252464846 ,0.09953817108569275 ,0.07460168844448836 ,0.10063163434604336 ,0.10721095110473533 ,0.16243080797726914 ,0.14789743320232906 ,0.05253726893194143 ,0.09245180761389392 ,0.03817364702047064 ,0.09098544301654217 ,0.10394831823701625 ,0.13062200161654505 ,0.16615576844055147 ,0.13829364212889556 ,0.09418769947453683 ,0.11380698021350291 ,0.12369953965558922 ,0.13279519824455366 ,0.09942596434867336 ,0.06953107387080862 ,0.06398476784943843 ,0.11628117096945757 ,0.025939662243256237 ,0.07459519782842475 ,0.03731167122548639 ,0.14137509154305278 ,0.05504022630452436 ,0.07187479688355092 ,0.07450252620650047 ,0.11974066289644292 ,0.028972212351608906 ,0.1021912442531713 ,0.08475132685134867 ,0.16527203432172818 ,0.09589491837883522 ,0.031175251643422445 ,0.12126790257553818],
                        [0.12248399775645577 ,0.17453246282989024 ,0.15329597231413788 ,0.10495544827774965 ,0.11196211791273333 ,0.141255418239234 ,0.08673379354416531 ,0.0913752175093009 ,0.12359930013055793 ,0.0673015573843195 ,0.06997521557355624 ,0.09872659936552106 ,0.0696989484577003 ,0.07192310780954331 ,0.09934370226876768 ,0.07997720145919648 ,0.14389797677780786 ,0.08514183058608142 ,0.13683464661405093 ,0.0785191874360397 ,0.02435094588084822 ,0.06427896944306932 ,0.136204774607601 ,0.1541095018272817 ,0.14009414025127348 ,0.12688389427534053 ,0.14390911444637322 ,0.11401350309556368 ,0.1339147849472248 ,0.022244515603454786 ,0.02733393644131883 ,0.11505494379957194 ,0.07584230721993682 ,0.13760997496023153 ,0.08168950529573493 ,0.11701116727006436 ,0.044961482189727967 ,0.18333127005806693 ,0.1119511763787775 ,0.12112944247480022 ,0.08525773931047026 ,0.1319181624111246 ,0.1302603611939449 ,0.10615967568188855 ,0.0313320841259944 ,0.06053680018463595 ,0.07576589765918038 ,0.1376468220077562 ,0.06274977608949307 ,0.14821837415908762 ,0.030931055620200765 ,0.017947965434839265 ,0.10373204739784832 ,0.06628448838014765 ,0.17034884551711998 ,0.042360092648686246 ,0.1303491474070387 ,0.06950878787776599 ,0.13562932552933202 ,0.03443258256022882],
                        [0.07811068514716296 ,0.09566704436888154 ,0.11355791267399398 ,0.1292692495318764 ,0.10637544447493155 ,0.17557381042781453 ,0.17856761952823905 ,0.012696287705769449 ,0.06095871082283645 ,0.036031667728609176 ,0.07512268048342464 ,0.0729452108557548 ,0.13243906034227623 ,0.07315013736880771 ,0.05970225822913962 ,0.1463040836162946 ,0.09935807705519427 ,0.05708793676627193 ,0.09291420265231298 ,0.07966337874163551 ,0.0937555853828848 ,0.11144372241803487 ,0.15777900933969968 ,0.09030278322195168 ,0.09134047220595491 ,0.11510012639086856 ,0.1047860231109514 ,0.1513094063147582 ,0.11317382364231544 ,0.015364548225045084 ,0.051017005189817916 ,0.17582492863762417 ,0.12710374317726472 ,0.06757067547644546 ,0.08156980049801771 ,0.1313215043112339 ,0.14537720771899232 ,0.14899913384307253 ,0.1274954384641472 ,0.1343150786640518 ,0.10838719667429278 ,0.14926037728038893 ,0.0650595433422673 ,0.07697910313563666 ,0.1345081904083572 ,0.0920675827616746 ,0.09954574884927177 ,0.1280052274012215 ,0.08961319060497056 ,0.05698715045040882 ,0.11261435970891803 ,0.10729636994910284 ,0.0707992508993786 ,0.0981175407511603 ,0.09705927372052975 ,0.12789184970738873 ,0.10053988143661037 ,0.043177739730845974 ,0.04929292110208135 ,0.10835945626556011],
                        [0.05062629827082308 ,0.11169405048295553 ,0.16108384707086398 ,0.04393805287242375 ,0.10736341142178896 ,0.12056921455969896 ,0.04583445236644314 ,0.1371694353379296 ,0.0842409317737661 ,0.034412223844275024 ,0.11202900685540965 ,0.053852496856678964 ,0.09692549759822633 ,0.10349676442655881 ,0.08581786088436975 ,0.15060297005863887 ,0.0603692572388548 ,0.03258453930128369 ,0.06341403941744024 ,0.13671811712760462 ,0.12167772436362484 ,0.09990954153669918 ,0.12311373532187159 ,0.1085221915913062 ,0.07461284824233158 ,0.11302640149121176 ,0.08718635203848794 ,0.15813732454135357 ,0.042794420765423315 ,0.12759826756086334 ,0.1743623289273517 ,0.1216345199910138 ,0.06792523298673267 ,0.15878607808780398 ,0.08026337079291176 ,0.07412956725466084 ,0.14875258734737434 ,0.054319129011645144 ,0.05703174010299186 ,0.09951967260714079 ,0.12545695356234188 ,0.16341027264905444 ,0.03498524389766059 ,0.1484794759933049 ,0.10360048756630254 ,0.19066009200816092 ,0.10140883721366341 ,0.11470697970924366 ,0.1460199501487599 ,0.11132465995177102 ,0.045509803187888886 ,0.0780773602346058 ,0.08656040998653398 ,0.14509963404402987 ,0.07202171520479062 ,0.12998705804795163 ,0.08199368371658836 ,0.059684331063588884 ,0.022093899984677125 ,0.13332331987305984],
                        [0.10158957746632412 ,0.10225239418487383 ,0.01637715095712582 ,0.0516579829940976 ,0.07993777727990818 ,0.15339463539204054 ,0.10966239463021325 ,0.1258660653457226 ,0.09032729770513162 ,0.08447307744066575 ,0.09465942140858981 ,0.1310472485664511 ,0.05444546024147638 ,0.14083687931339822 ,0.11629195763609511 ,0.07028636301933582 ,0.1682866536669615 ,0.12298253019352787 ,0.07201704402070451 ,0.10002055647027897 ,0.06545176354885755 ,0.043223022322592244 ,0.11988737523201798 ,0.1962578792005439 ,0.09081804269322705 ,0.13241759568624428 ,0.10050593337576139 ,0.11740036331860751 ,0.044486660009280865 ,0.005484710628337064 ,0.14549743483139718 ,0.11092548762653587 ,0.08311920087862767 ,0.03391814819512036 ,0.06485058111387201 ,0.13725559508649327 ,0.1140949355431308 ,0.06775002158106104 ,0.1887837099082201 ,0.1606841659764816 ,0.10144120643588493 ,0.13038895184100463 ,0.03804347794377795 ,0.06991765320997698 ,0.016437577735120612 ,0.11759440370606096 ,0.17431481966480408 ,0.16742327589803863 ,0.07948245469687103 ,0.1567729297433028 ,0.13023599756296117 ,0.10165036834205929 ,0.10028716004060746 ,0.07866359873782962 ,0.009742549989905381 ,0.06757034446770177 ,0.17042585948533484 ,0.06085423382868256 ,0.14403330785481427 ,0.1374997563362942],
                        [0.09048782396206444 ,0.11353260255375103 ,0.13057960611933989 ,0.11151572345480053 ,0.10814744139998152 ,0.12119402691962927 ,0.05022104855176179 ,0.11292852099995923 ,0.16819281313725382 ,0.11733767850426924 ,0.10142847257299786 ,0.17090938847918147 ,0.0844476041165986 ,0.1509810201871722 ,0.05758887749522808 ,0.07126865513591908 ,0.11027414943417085 ,0.17633083630199273 ,0.117289041260345 ,0.1050856427732719 ,0.11319702203956686 ,0.14835249172847365 ,0.1333380407776188 ,0.11634530698827905 ,0.11961203248918587 ,0.10529907321187806 ,0.03722501355145469 ,0.1350162249975249 ,0.1534513365385885 ,0.09255125211847592 ,0.11314167223176248 ,0.06451977635054171 ,0.1196421262880946 ,0.015098713307533752 ,0.02944875028009897 ,0.06588117729189341 ,0.12053387708177342 ,0.004172605189999557 ,0.13696476821754253 ,0.11702617751005649 ,0.08365141904221073 ,0.1743130238935499 ,0.005598023997961866 ,0.159026003352043 ,0.09493181342229828 ,0.12054493106865813 ,0.1382426648729524 ,0.1618335950815151 ,0.18978933088164318 ,0.0998618653579328 ,0.0650767156854277 ,0.09545855397178661 ,0.10479481533919682 ,0.0872083950028442 ,0.15703138491878688 ,0.04868903285653771 ,0.09275966175447903 ,0.0922257567027281 ,0.1235861803892105 ,0.11377046711446365]
                        ]
        
        
        selector = datetime.now()- self.init_time
        selector = (selector.seconds/60)%60
        for i in range(self.sensor_count):
            current_decay_rate = decay_recorded[i][math.floor(selector)]
            self.state[i] = self.state[i] - current_decay_rate
    
    def distance(self,a,b):
        return distance.euclidean(a, b)
    
    def update_distance(self):
        for i in range(self.sensor_count):
            self.state[self.sensor_count+i] = self.distance(self.current_position,self.sensor_positions[i])
        
    def get_critical_sensor_count(self):
        count = 0
        for i in range(self.sensor_count):
            if self.state[i] < self.critical_level:
                count += 1
        return count
        
    def get_distance_traveled(self):
        return self.total_distance
        

    def step(self, action): 
        self.episodes -= 1
        #self.decay_validation()
        self.decay()
        r = 0
        min_dist = self.state[self.sensor_count+action]
        min_pos = action
        lowest_batt = self.state[action]
        lowest_batt_pos = action
        for i in range(self.sensor_count):
            #get minimum distance
            if self.state[self.sensor_count+i] < min_dist and self.previous_action != i:
                min_dist = self.state[self.sensor_count+i]
                min_pos = i
            #get lowest battery
            if self.state[i] < lowest_batt:
                lowest_batt = self.state[i]
                lowest_batt_pos = i
            if self.state[i] < self.warning_level:
                r -=  1#abs(((100 - self.state[i])/100))
            if self.state[i] < self.critical_level:
                self.dead_sensors += 1
                r -=  10
                done = True
        self.minbatt = lowest_batt_pos
        self.min = min_pos
        #reward calculation

        #for sensors over 60% battery
        if self.state[action] > 60 and self.get_critical_sensor_count()>0:
            r -= 10
            done = True 

        #no repetation
        if self.previous_action == action:
            r -= 1
            
        if self.state[action] >= self.warning_level:
            r += 1

        

        #reward for lowest battery
        if action == lowest_batt_pos:
            r += 15
        else:
           r -= 10
           done = True
        

        if self.state[action] <= 0:
            self.state[action] = 0
        
        #reward for lowest distance
        if self.previous_action == min_pos and self.state[self.sensor_count+action] != 0:
            r += 10
        else:
            r -= 10
            #done = True
        
        self.previous_action = action
        


        
        #Uncoment for training
        self.charge(action)

        reward = r

        self.P_list = np.insert(self.P_list,0,action)
        self.P_list = self.P_list[:-1]
        

        #NeedySensor.logger.writerow([self.episodes,action,distance_travelled,reward])
        


        if self.episodes <= 0: 
            done = True
        else:
            done = False

        distance_travelled = self.state[action + self.sensor_count]
        self.total_distance += distance_travelled
        info = {'Episode':self.episodes,'Action':action,'Distance_Travelled':distance_travelled,'Total_Distance':self.total_distance,'Dead_Sensors':self.dead_sensors,'Reward':reward}
        
        # Return step information
        return self.state, reward, done, info

    def render(self):
        self.display_battery()
        pass
    
    def reset(self):
        self.state.fill(60)
        self.episodes = 100
        self.update_distance()
        return self.state
    
    def display_battery(self):
        for i in range(self.sensor_count):
            print("Sensor - ",i,end=" -> |")
            for n in range(50):
                if(n <= int(self.state[i]/2)):
                    print("-",end="")
                else:
                    print(" ",end="")
            print("| - ",self.state[i],"%" , "Distance:" , self.state[self.sensor_count+i])
        
        print("")
        print("")
        print("Path -> ",self.P_list)
        print("min - " , self.min)
        print("min batt- " , self.minbatt)
        
    
    def check_cell(self,i,j):
        not_clear = False
        for k in range(10):
            if i == int(self.sensor_positions[k][0]) and j == int(self.sensor_positions[k][1]):
                not_clear = True
        return not_clear
        
    def charge(self,sensor_index):
        self.state[sensor_index] = 100
        self.current_position = self.sensor_positions[sensor_index]
        self.pose_x=self.sensor_positions[sensor_index][0]
        self.pose_y=self.sensor_positions[sensor_index][1]
        self.update_distance()
        
    def display_map(self):
        os.system('clear')
        #print(self.pose_x, self.pose_y)
        for i in range(self.map_bound):
            print("|",end="")
            for j in range(self.map_bound):
                #update robot location
                if self.pose_x == i and self.pose_y == j:
                    print(" \u0394 ",end="")
                elif self.check_cell(i,j):
                    print(" S ",end="")
                else:
                    print("   ",end="")
            print("|")
        print("")
        print("")
        self.display_battery()
        print("")
        print("")
        print("Path -> ",self.P_list)
                    
                
                
